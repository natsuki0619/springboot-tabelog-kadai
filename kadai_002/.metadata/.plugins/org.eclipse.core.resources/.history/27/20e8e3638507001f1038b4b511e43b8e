package com.example.nagoyameshi.controller;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Reservation;
import com.example.nagoyameshi.entity.Shop;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationInputForm;
import com.example.nagoyameshi.form.ReservationRegisterForm;
import com.example.nagoyameshi.repository.ReservationRepository;
import com.example.nagoyameshi.repository.ShopRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.ReservationService;
import com.example.nagoyameshi.service.ShopService;

@Controller
public class ReservationController {
    private final ReservationRepository reservationRepository;
    private final ShopRepository shopRepository;
    private final ReservationService reservationService;
    private final ShopService shopService;

    public ReservationController(ReservationRepository reservationRepository, ShopRepository shopReposotiry,
            ReservationService reservationService, ShopRepository shopRepository, ShopService shopService) {
        this.reservationRepository = reservationRepository;
        this.shopRepository = shopRepository;
        this.reservationService = reservationService;
        this.shopService = shopService;
    }

    @GetMapping("/reservations")
    public String index(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
            @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable,
            Model model) {
        User user = userDetailsImpl.getUser();
        Page<Reservation> reservationPage = reservationRepository.findByUserOrderByCreatedAtDesc(user, pageable);

        model.addAttribute("reservationPage", reservationPage);

        return "reservations/index";
    }

    @GetMapping("/reservation/{Id}")
    public String showReservationForm(@PathVariable Long Id, Model model) {
        List<String> japaneseRegularHolidays = shopService.getRegularholidayByShopId(Id);
        List<Integer> mappedRegularHolidays = mapJapaneseWeekdaysToNumbers(japaneseRegularHolidays);
        model.addAttribute("regularholiday", mappedRegularHolidays);
        return "shops/show";
    }

    private List<Integer> mapJapaneseWeekdaysToNumbers(List<String> japaneseWeekdays) {
        List<Integer> mappedWeekdays = new ArrayList<>();
        for (String japaneseWeekday : japaneseWeekdays) {
            int weekdayNumber = mapJapaneseWeekdayToNumber(japaneseWeekday);
            mappedWeekdays.add(weekdayNumber);
        }
        return mappedWeekdays;
    }

    private int mapJapaneseWeekdayToNumber(String japaneseWeekday) {
        switch (japaneseWeekday) {
        case "日":
            return 0;
        case "月":
            return 1;
        case "火":
            return 2;
        case "水":
            return 3;
        case "木":
            return 4;
        case "金":
            return 5;
        case "土":
            return 6;
        default:
            throw new IllegalArgumentException("Invalid Japanese weekday: " + japaneseWeekday);
        }
    }

    @GetMapping("/shops/{id}/reservations/input")
    public String input(@PathVariable(name = "id") Integer id,
            @ModelAttribute @Validated ReservationInputForm reservationInputForm,
            BindingResult bindingResult,
            RedirectAttributes redirectAttributes,
            Model model) {

        Shop shop = shopRepository.getReferenceById(id);
        String fromReservationTime = reservationInputForm.getFromReservationTime();
        String opening = shop.getOpening();
        String closed = shop.getClosed();
        Integer numberOfPeople = reservationInputForm.getNumberOfPeople();
        String remarks = reservationInputForm.getRemarks();

        if (fromReservationTime != null) {
            if (!reservationService.isWithinOpening(fromReservationTime, opening)) {
                FieldError fieldError = new FieldError(bindingResult.getObjectName(), "fromReservationTime",
                        "予約時間は営業時間内でお願いします。");
                bindingResult.addError(fieldError);
            }
        }

        if (fromReservationTime != null) {
            if (!reservationService.isWithinClosed(fromReservationTime, closed)) {
                FieldError fieldError = new FieldError(bindingResult.getObjectName(), "fromReservationTime",
                        "予約時間は営業時間内でお願いします。");
                bindingResult.addError(fieldError);
            }
        }

        if (bindingResult.hasErrors()) {
            model.addAttribute("shop", shop);
            model.addAttribute("errorMessage", "予約内容に不備があります。");
            return "shops/show";
        }

        redirectAttributes.addFlashAttribute("reservationInputForm", reservationInputForm);
        return "redirect:/shops/{id}/reservations/confirm";
    }

    @GetMapping("/shops/{id}/reservations/confirm")
    public String confirm(@PathVariable(name = "id") Integer id,

            @ModelAttribute ReservationInputForm reservationInputForm,
            @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
            Model model) {

        Shop shop = shopRepository.getReferenceById(id);
        User user = userDetailsImpl.getUser();

        LocalDate reservationDate = reservationInputForm.getReservationDate();
        LocalTime reservationTime = reservationInputForm.getReservationTime();

        ReservationRegisterForm reservationRegisterForm = new ReservationRegisterForm(shop.getId(), user.getId(),
                reservationDate.toString(), reservationTime.toString(), reservationInputForm.getNumberOfPeople(),
                reservationInputForm.getRemarks());

        model.addAttribute("shop", shop);
        model.addAttribute("reservationRegisterForm", reservationRegisterForm);

        return "reservations/confirm";
    }

    @PostMapping("/shops/{id}/reservations/create")
    public String create(@ModelAttribute ReservationRegisterForm reservationRegisterForm) {
        reservationService.create(reservationRegisterForm);

        return "redirect:/reservations?reserved";
    }

    @PostMapping("/reservations/{id}/delete")
    public String delete(@PathVariable(name = "id") Integer id, RedirectAttributes redirectAttributes) {
        reservationRepository.deleteById(id);

        redirectAttributes.addFlashAttribute("successMessage", "予約をキャンセルしました。");

        return "redirect:/reservations";
    }
}