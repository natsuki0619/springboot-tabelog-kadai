package com.example.nagoyameshi.controller;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.example.nagoyameshi.entity.DownloadHelper;
import com.example.nagoyameshi.entity.Shop;
import com.example.nagoyameshi.entity.Shopcsv;
import com.example.nagoyameshi.repository.ShopRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.dataformat.csv.CsvGenerator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;

@Controller
public class CsvController {

    private final ShopRepository shopRepository;

    public CsvController(ShopRepository shopRepository) {
        this.shopRepository = shopRepository;
    }

    @Autowired
    DownloadHelper downloadHelper;

    /**
     * CsvMapperで、csvを作成する。
     * @return csv(String)
     * @throws JsonProcessingException
     */
    public String getCsvText() throws JsonProcessingException {
        CsvMapper mapper = new CsvMapper();

        //文字列にダブルクオートをつける
        mapper.configure(CsvGenerator.Feature.ALWAYS_QUOTE_STRINGS, true);
        //ヘッダをつける
        CsvSchema schema = mapper.schemaFor(Shopcsv.class).withHeader();
        //DBからデータを取得する。

        List<Shop> shopList = shopRepository.findAll();

        List<Shopcsv> shopcsvList = shopList.stream().map(
                e -> new Shopcsv(e.getId(), e.getName(), e.getOpening(), e.getClosed(), e.getRegularHoliday(),
                        e.getLowestPrice(), e.getHighestPrice(), e.getCapacity(), e.getMenu(), e.getPostalCode(),
                        e.getAddress(), e.getPhoneNumber()))
                .collect(Collectors.toList());

        return mapper.writer(schema).writeValueAsString(shopcsvList);
    }

    /**
     * csvをダウンロードする。
     * @param response
     * @return
     * @throws IOException
     */
    @RequestMapping(value = "/download/csv", method = RequestMethod.POST)
    public ResponseEntity<byte[]> download() throws IOException {
        HttpHeaders headers = new HttpHeaders();
        String csvText = getCsvText();
        byte[] csvBytes = csvText.getBytes("MS932");
        return ResponseEntity.ok()
                .headers(headers)
                .contentType(MediaType.TEXT_CSV) 
                .body(csvBytes);

    }
}